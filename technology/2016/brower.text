浏览器的工作原理笔记：

1.浏览器的主要功能：

	浏览器的主要功能就是向服务器发出请求，在浏览器窗口中展示您选择的网络资源。


2. 呈现引擎

	主流程：
		呈现引擎一开始会从网络层获取请求文档的内容，内容的大小一般限制再8000个块以内。

		之后呈现引擎开始解析HTML文档，并将各个标签逐个转化成"内容树"上的DOM节点。同时也会解析外部的CSS文件以及样式元素中的样式数据。HTML中这些带有视觉指令的样式信息将用于创建另一个树结构：呈现树。

		呈现树包含多个带有视觉属性（如颜色和尺寸）的矩形。这些矩形的排列顺序就是他们将在屏幕上显示的顺序。

		呈现树构建完成之后，进入"布局"处理阶段，也就是为每个节点分配一个应出现在屏幕上的确切坐标。

		布局完成之后，下一个阶段就是"绘制": 呈现引擎会遍历呈现树，由用户界面后端层将每个节点绘制出来。

	*: 这是一个渐进的过程，呈现引擎为求尽快将内容显示在屏幕上。它不必等到整个HTML文档解析完毕，就会开始构建呈现树和设置布局。在不断接受和处理来自网络的其余内容的同时，呈现引擎会将部分内容解析并显示出来。


3. 解析-综述

	解析是呈现引擎中非常重要的一个环节。解析文档是指将文档转化为有意义的结构，也就是可让代码理解和使用的结构。解析得到的结果通常是代表了文档结构的节点树，它称作解析树或者语法树。

	语法： 解析是以文档所遵循的语法规则为基础的。所有可以解析的格式都必须对应确定的语法，这称为与上下文无关的语法。
	
	解析器与词法分线器的组合：
		
		解析的过程可以分成两个子过程：词法分析和语法分析。

		词法分析是将输入内容分割成大量标记的过程。标记是语言中的词汇，及构成内容的单位，在人类语言中，它相当于语言字典中的单词。语法分析是应用语言的语法规则的过程。

		解析器通常将解析工作分给以下两个组建来处理：词法分线器（有时也称为标记生成器），负责将输入内容分解成一个个有效标记；而解析器负责根据语言的语法规则分析文档的结构，从而构建解析树。
	
	解析是一个迭代的过程。通常，解析器会向词法分线器请求一个新标记，并尝试将其余某条语法规则进行匹配。如果发现了匹配规则，解析器会将一个对应于该标记的节点添加的解析树中，然后继续请求下一个标记。

	词汇和语法的正式定义：词汇通常用正则表达式表示，语法通常使用巴科斯范式BNF的格式来定义。


4. HTML解析器

	HTML解析器的任务是将HTML标记解析成解析树。

	HTML语法定义：HTML的词汇和语法在W3C组织创建的规范中进行了定义。

	非与上下文无关的语法：语法可以用BNF等格式进行正式定义，但遗憾的是，所有常规解析器都不适用于HTML(它们可以用于解析CSS和JavaScript)。HTML并不能很容易的用解析器所需的与上下文无关的语法来定义。有一种可以定义

	HTML的正式规则：DTD(Document Type Definition, 文档类型定义)，但它不是与上下文无关的语法。这出看起来有些奇怪，HTML和XML非常类似，有很多XML解析器可以使用，HTML存在一个XML变体（XHTML），那么有什么大区别呢

	区别在于HTML的处理更为"宽容"，它允许您省略某些隐式添加的标记，有时还能省略一些起始或者结束的标记等等。和XML严格的语法不同，HTML整体来看是一种"软性"的语法。这种看上去细微差别实际上却带来了巨大的影响。一

	方面这是HTML如此流行的原因，它能包容您的错误，简化网络开发。另一方面，这使得它很难编写正式的语法。概况地说，HTML无法很容易的通过常规解析器解析，也无法通过XML解析器来解析。

	HTML的定义采用了DTD格式。次格式可用于定义SGML族的语言。它包括所有允许使用 的元素及其属性和层次结构的定义。

	DOM：解析器的输出"解析树"是由DOM元素和属性几点构成的树结构。DOM是文档对象模型（Document Object Model）的缩写。它是HTML文档的对象表示，同时也是外部内容（如JavaScript）与HTML元素之间的接口。解析树的根节点

	是"Doucument"对象。DOM与标记之间几乎是一一对应的关系。


5. 解析算法

	








